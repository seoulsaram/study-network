{
	"nodes":[
		{"id":"2c9e67b80d920dfd","type":"text","text":"## 전송 계층의 필요성\n\n\b네트워크 계층의 IP는 신뢰할 수 없는 통신과 비연결형 통신을 수행한다는 한계가 있다. 그렇기 때문에 전송계층에서 신뢰할 수 있는 통신과 연결형 통신을 가능하게 하여 이러한 IP의 한계를 극복하고, 포트번호를 통해 응용 계층의 어플리케이션 프로세스들을 식별할 수 있도록 한다.","x":-300,"y":-180,"width":545,"height":380},
		{"id":"4cdb38747bb5536e","type":"text","text":"PDU : 세그먼트","x":260,"y":-180,"width":250,"height":60},
		{"id":"f8a56fdd7e8b57bf","type":"text","text":"## NAPT (Network Address Port Translation)\n\n공인 IP주소와 사설 IP주소를 변환해주는 기술인 NAT를 확장한 기술이다.\n\n1.2.3.4 라는 하나의 공인 IP주소를 여러 대의 컴퓨터가 사용할 수 있도록 해준다.\n\n| 사설 IP          | 사설 포트 | 공인 IP       | 공인 포트 | 연결 상태       | 비고      |\n| -------------- | ----- | ----------- | ----- | ----------- | ------- |\n| 192.168.10:100 | 80    | 203.0.113.5 | 5001  | ESTABLISHED | 웹 브라우저  |\n| 192.168.10:101 | 3389  | 203.0.113.5 | 5002  | ESTABLISHED | 원격 데스크톱 |\n| 192.168.10:102 | 22    | 203.0.113.5 | 5003  | ESTABLISHED | SSH     |\n\n포트번호로 컴퓨터를 구분하지만, 하나의 컴퓨터에서 여러 프로세스가 보내는 응답은 응답 별로\n고유한 포트번호가 붙는다.\n### 예시\n\n192.168.10:3000 컴퓨터에서 각각 웹브라우저와 게임에서 요청이 발생함.\n이 두 요청에 대해서는 192.168.10 + 임의의 포트번호가 붙어서 식별 됨\n","x":-387,"y":260,"width":720,"height":700},
		{"id":"19f55e63f2a14406","type":"text","text":"### TCP 연결 \n\n### 제어비트 종류\n- ACK : 세그먼트의 승인용\n- SYN : 연결을 수립용\n- FIN : 연결을 종료용\n\n### 액티브 오픈\n처음 연결을 시작하는 쪽의 연결 수립 과정을 의미. 일반적으로 클라이언트에 의해 수행 됨.\n\n### 패시브 오픈\n연결해달라고 요청이 오면 그에 따라 연결을 해주는 과정. 주로 서버에 의해 수행 됨.\n","x":-387,"y":1040,"width":720,"height":460},
		{"id":"633a64af11194eea","type":"text","text":"## TCP연결 상태\n### 연결 수립 상태\n\n![[Pasted image 20241218010621.png]]\n\n- SYN-SENT : 액티브 오픈 호스트(클라)가 SYN 세그먼트를 보낸 뒤 그에 대한 응답인 SYN + ACK 세그먼트를 기다리는 상태. 연결 요청을 보낸 뒤 대기중인 것\n- SYN-RECEIVED : 패시브 오픈 호스트(서버)가 SYN + ACK 세그먼트를 보낸 뒤 그에 대한 ACK 세그먼트를 기다리는 중.\n- ESTABLISHED : 연결이 확립되었음을 나타냄. 데이터를 송수신 할 수 있는 상태를 의미. 두 호스트가 마지막 ACK 세그먼트를 주고받은 상태이기도 함.\n\n\n### 연결 종료 상태\n\n![[Pasted image 20241218010659.png]] \n\n- FIN-WAIT-1 : 연결 종료의 첫 단계. FIN세그먼트로서 연결 종료 요청을 보낸 액티브 클로즈 호스트는 FIN-WAIT-1 상태가 됨. => 연결 종료할래!\n- CLOSE-WAIT : 종료 요청인 FIN 세그먼트를 받은 패시브 클로즈 호스트가 그에 대한 응답으로 ACK 세그먼트를 보낸 후 대기하는 상태. => 연결 끈다고? 알겠어 끌게~\n- FIN-WAIT-2 : FIN-WAIT-1 상태에서 ACK세그먼트를 받게 되면 FIN-WAIT-2 상태가 됨. 상대 호스트의 FIN세그먼트를 기다리는 상태. => 연결 끈다고 했다. 꺼지길 기다리는 중...\n- LAST-ACK : FIN세그먼트를 전송한 뒤 이에 대한 ACK세그먼트를 기다리는 상태 => 야 나 껐어 확인좀\n- TIME-WAIT : 액티브 클로즈 호스트가 FIN 세그먼트를 수신한 뒤, 이에 대한 ACK 세그먼트를 전송한 뒤 접어드는 상태. 패시브 클로즈 호스트가 마지막 ACK 세그먼트를 수신하면 CLOSED상태로 전이하는 반면, TIME-WAIT 상태에 접어든 액티브 클로즈 호스트는 일정 시간을 기다린 뒤 CLOSED 상태로 전이한다. => 오케이 완전히 끄기 전에 혹시 재전송이 필요한 세그먼트가 있을 수도 있으니 좀 기다렸다가 꺼져야지.\n\nTIME-WAIT\n상대 호스트가 받았어야 할 마지막 ACK 세그먼트가 올바르게 전송되지 않았을 수 있기 때문에 필요한 state. TCP송수신 과정에서는 세그먼트가 올바르게 전송되지 않았다면 해당 세그먼트를 재전송해야 한다. 만약 TIME-WAIT 상태로 일정 시간 대기하지 않고 곧바로 연결을 종료해버리면 상대 호스트 입장에서 마지막 ACK 세그먼트를 재전송받을 수 없음. 또한 한 연결을 종료하고 다른 연결을 수립하는 과정 사이에 대기 시간이 없다면 서로 다른 연결의 패킷들이 혼란을 야기할 수 있음.\n\n","x":-387,"y":1580,"width":720,"height":1780}
	],
	"edges":[]
}
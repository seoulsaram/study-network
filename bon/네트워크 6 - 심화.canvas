{
	"nodes":[
		{"id":"011fd571012dd880","type":"text","text":"## \b용어 짚고 넘어가기\n\n1. 가용성 (Availability)\n\t가용성은 안정성의 정도를 나타내는 용어이다.\n\t시스템이 사용자 요청에 응답할 수 있는 상태를 유지하는 능력을 뜻한다.\n\t가용성은 전체 사용 시간 중에서 정상적인 사용 시간을 의미한다.\n\t예 ) \"우리 서비스는 1년 중 99.9% 가동됩니다.\"\n\t예 ) \"요즘 우리 회사에서 고가용성 시스템을 구축하고 있어.  중단 시간이 1년에 **5분 15초 이하**로 제한되는 파이브 나인스를 목표로 하고있지. \"\n\t\n\t정상적인 사용 시간을 업타임, 정상적인 사용이 불가능한 시간을 다운타임이라고 한다.\n\n\t다운타임의 발생 원인을 모두 찾아 원천차단하는것은 불가능하다.\n\t핵심은 문제가 발생하더라도 계속 기능할 수 있도록 설계하는 것이다.\n\t문제가 발생하더라도 기능할 수 있는 능력을 결함 감내(fault tolerance)라고 한다.\n\t\n\n---\n\n2. 이중화\n\t이중화란 '무언가를 이중으로 두는 기술'\n\t백업을 마련하는 방법.\n\t**이중화할 수 있는 대상들은 대부분 '문제가 발생할 경우 시스템 전체가 중단될 수 있는 대상'이라는 공통점이 있다.** \n\n\t문제가 발생할 경우 시스템 전체가 중단될 수 있는 대상을 가리켜 '단일 장애점' (SPoF; Single Point Of Failure)라고 부른다.\n\n\t가용성을 높이기 위해서는 SPOF를 최대한 이중화 하는것이 좋다.\n\n- 액티브/스탠바이\n\t- 한 시스템은 가동하고, 다른 시스템은 백업 용도로 대기 상태로 두는 이중화 구성 방식.\n\t- 안전한 구성 방식이나, 하나의 장비를 사용할 때에 비해 성능상의 큰 변화를 기대하기 어려움.\n- 액티브/액티브\n\t- 두 시스템 모두를 가동 상태로 두는 구성 방식.\n\t- 두 시스템이 함께 가동되므로 성능상의 이점이 있으나, 한 시스템에 문제가 발생하면 순간적으로 다른 시스템에 부하가 급증할 수 있다.\n\n\t무언가를 여러개 두는 기술 => 다중화","x":-240,"y":-260,"width":560,"height":1160},
		{"id":"3ff3143df8946b85","type":"text","text":"# 네트워크 심화","x":-240,"y":-500,"width":560,"height":80},
		{"id":"8bd6bc7d4d7b823a","type":"text","text":"# 1. 안정성을 위한 기술","x":-240,"y":-400,"width":560,"height":80},
		{"id":"925f5caa97d4c969","type":"text","text":"## 로드밸런싱\n\n서버를 다중화 했더라도 트래픽을 고르게 분산해야 가용성이 높아진다.\n트래픽의 고른 분배를 위해 사용되는 기술이 바로 로드 밸런싱이다.\n\n로드밸런서는 주로 이중화나 다중화된 서버와 클라이언트 사이에 위치한다.\n","x":-240,"y":960,"width":560,"height":220},
		{"id":"7d7146f4fe5435dd","type":"text","text":"## 포워드 프록시와 리버스 프록시\n\n\n프록시는 클라이언트와 서버 사이에 위치한 중계 서버로 통신을 대신 수행하는 대리자 역할을 한다. 프록시가 없다면 클라이언트는 서버와 직접 통신한다. 반면, 클라이언트와 서버 사이에 프록시 서버가 있다면, 클라이언트와 서버는 프록시를 한번 거쳐 통신하게된다.\n프록시를 사용하면 보안을 강화할 수 있고, 통신 성능을 높여주고, 통신 비용을 절약할 수 있다. 프록시는 프록시 서버의 위치에 따라 유형이 나뉜다.\n\n\n### 포워드 프록시\n포워드 프록시는 클라이언트와 인터넷 사이에 위치해있다. 이로 인해 클라이언트의 정보가 서버측에 노출되지 않는다.\n-  캐싱 : \n\t- HTML, JS, CSS, 이미지와 같은 정적 파일들을 원 서버로부터 캐싱하고, 클라가 요청할 때 캐시로 응답할 수 있음. 원 서버에 대한 부하 감소 및 네트워크 병목 현상도 감소시킬 수 있다.\n- 특정 컨텐츠 액세스 제한 : \n\t- 내부망에 프록시 서버를 두어 특정 컨텐츠에 대한 액세스를 제한할 수 있다.\n- 익명성 확보 : \n\t- 프록시 서버를 통해 요청이 발생하므로 클라이언트는 인터넷에서 자신을 숨길 수 있다. 클라이언트의 진짜 IP주소를 노출하고 싶지 않을 경우 프록시 서버를 경유할 수 있다.\n\n### 리버스 프록시\n서버와 인터넷 사이에 위치한다. 클라이언트의 요청을 서버 대신 받게된다. 이런 구조에서는 클라이언트는 프록시 뒤의 서버의 존재를 모르게 되며, 웹 서버에 요청하듯이 프록시 서버에 요청하게 된다.\n- 로드 밸런싱 : \n\t- 서버 대신 요청을 받아 실제 서버에  부하를 분산하는 역할을 할 수 있다.\n- 무중단 배포 : \n\t- 서버가 여러대일 경우 한 서버가 배포중일 땐 해당 서버에는 요청을 전달하지 않는 방식으로 요청을 분산하면 사용자는 서비스 이용이 중단되는 경험 없이 계속 서비스를 이용할 수 있다.\n- DDoS 등의 공격으로부터 보호 : \n\t- 외부에서 서버의 IP를 알 수 없게 되기 때문에 공격자는 리버스 프록시 서버만을 공격 대상으로 설정할 수 있으므로 실제 서버를 공격으로부터 보호할 수 있다.\n- SSL암호화 : \n\t- 리버스 프록시에만 SSL을 적용하면 실제 서버는 SSL통신에서 오는 추가적인 계산 비용을 없앨 수 있다.\n- 캐싱\n","x":-320,"y":1600,"width":780,"height":1020},
		{"id":"4e16a7b37d3e7db1","type":"text","text":"*오리진 서버*\n클라이언트가 최종적으로 메시지를 주고받는 대상, 즉 기존에 '서버'라고 지칭한 대상은\n'자원을 생성하고 클라이언트에게 권한 있는 응답을 보낼 수 있는 HTTP서버'를 의미하는데 \n이를 **오리진 서버**라고 한다\n\n이때 인바운드 메시지는 오리진 서버를 향해 가는 메시지, 아웃바운드 메시지는 클라이언트를 향해 가는 메시지를 의미.\n","x":-631,"y":1618,"width":250,"height":360},
		{"id":"837c50758161586c","type":"text","text":"## \bHTTPS\nSSL과 TSL는 인증과 암호화를 수행하는 프로토콜이며, TLS는 SSL을 계승한 프로토콜이다.\nSSL/TSL를 사용하는 대표적인 프로토콜은 HTTPS이다.\nHTTP의 요청/응답이 평문으로 오고 간다면\nHTTPS의 요청/응답은 암호화 되어 오고간다.\n\n\n### **핸드셰이크 단계**\n\n1. **안녕! (Hello)**:\n    \n    - 클라이언트가 서버에 \"TLS 연결을 하고 싶어요!\"라고 요청. (ClientHello)\n        \n    - 클라이언트는 사용할 수 있는 암호화 방식(암호 스위트) 목록과 랜덤 데이터를 서버에 보냄.\n        \n    - 서버는:\n        \n        - 사용할 암호화 방식을 선택.\n        - 자신의 인증서(공개키 포함)와 랜덤 데이터를 클라이언트에 보냄. (ServerHello)\n2. **검증**:\n    \n    - 클라이언트는 서버가 제공한 인증서를 검사하여 신뢰할 수 있는 서버인지 확인.\n        - 인증서는 인증 기관(CA)에 의해 발행된 것이어야 함.\n        - 대부분 브라우저에는 공신력 있는 CA들의 정보와 CA가 만든 공개키가 이미 설치되어 있음. 서버가 보낸 SSL 인증서가 정말 CA가 만든 것인지를 확인하기 위해 내장된 CA 공개키로 암호화된 인증서를 복호화한다.\n1. **키 공유**:\n    \n    - 클라이언트와 서버가 **세션 키**를 협상.\n        - 클라이언트는 서버의 공개키를 사용해 세션 키를 암호화한 후 서버에 보낸다.\n        - 서버는 자신의 개인키로 이를 복호화하여 세션 키를 얻는다.\n4. **암호화 준비 완료**:\n    \n    - 클라이언트와 서버가 같은 세션 키를 공유한 상태가 됨.\n    - 이제 이 세션 키를 사용해 데이터를 암호화하여 안전한 통신 시작.\n5. **안전한 연결 시작**:\n    \n    - 핸드셰이크가 끝나고 암호화된 데이터 통신이 시작 됨.\n","x":-320,"y":2780,"width":780,"height":880},
		{"id":"c676d46295e09b46","type":"file","file":"네트워크 스터디 2024/스크린샷 2025-01-06 오후 11.25.35.png","x":-431,"y":1240,"width":943,"height":300},
		{"id":"d6b8e5c63e04042f","type":"file","file":"네트워크 스터디 2024/Pasted image 20250106233836.png","x":560,"y":1840,"width":400,"height":225},
		{"id":"08cd940819a6e24d","type":"file","file":"네트워크 스터디 2024/Pasted image 20250106233901.png","x":560,"y":2160,"width":400,"height":225},
		{"id":"9dbbe017be9022b4","type":"text","text":"# 2. 무선 네트워크\n\n많은 기기가 전파를 통해 통신한다면, 서로 다른 전파 신호가 같은 공간에 혼재할 수 있기 때문에 서로 다른 전파 신호를 구분하기 위해 통신에서 사용되는 전파에는 '주파수 대역'이 미리 정해져있다.\n\n### 와이파이와 802.11\nLAN환경에서의 무선통신은 IEEE 802.11로 표준화 되어 있다.\n그리고 IEEE 802.11표준은 대부분 2.4GHz, 5GHz 대역을 사용한다.\n\n와이파이는 와이파이 얼라이언스라는 비영리단체의 트레이드마크 이름이다.\n와이파이는 Wi-Fi5, Wi-Fi6 등으로 구분할 수 있는 세대가 있고, 각 세대는 각기 다른 IEEE 802.11 표준 규격을 준수한다.\n특정 제품에 특정 와이파이 인증 마크가 붙어 있을 경우, 해당 제품이 특정 IEEE 802.11 규격을 지켰음을 알 수 있고, 다른 제품과의 호환성도 알 수 있다.\n\n\n### AP \n무선 네트워크를 생성하기 위해서는 '무선 액세스 포인트 (이하 AP)'라는 네트워크 장비가 필요하다.\nAP(Access Point)는 무선 통신 기기들을 연결하여 무선 네트워크를 구성하는 장치이다.\n가정에 무선 공유기가 있다면, 그것이 AP 역할을 수행하는 장치라고 볼 수 있다.\nAP는 무선 LAN에서 통신을 중개하는 역할을 한다. 이렇게 AP를 경유하여 통신이 이루어지는 무선 네트워크 통신 방식을 인프라스트럭처 모드 라고 한다.\n무선 네트워크를 이루는 AP와 여러 장치들의 집합을 서비스 셋 이라고 부른다.\n같은 서비스 셋에 속한 장치들은 같은 무선 네트워크에 속한다고 볼 수 있다.\n\n이때, 각기 다른 서비스 셋을 구분할 수 있는 수단이 필요하다.\n그래서 서비스 셋을 식별하기 위해 서비스 셋 식별자(SSID; Service Set Identifier)을 사용한다.\nSSID는 무선 네트워크를 구분짓는 수단이자 무선 네트워크를 지칭하는 고유한 이름이다.\n(와이파이 이름이 바로 SSID)\nAP는 외부에 자신의 존재를 지속해서 알려야 한다. AP가 자신의 존재를 알리지 않으면 호스트는 연결 가능한 무선 네트워크가 존재한다는 사실을 알 수가 없기 때문이다.\n따라서 AP는 불특정 다수에게 자신을 알리는 브로드캐스트 메세지를 주기적으로 전송하고, 이 브로드캐스트 메시지를 비컨 프레임(beacon frame)이라 한다. 비컨 프레임 안에는 SSID와 AP의 MAC주소 등이 포함되어 있다.","x":-320,"y":3800,"width":780,"height":940}
	],
	"edges":[
		{"id":"7b0586598256873d","fromNode":"8bd6bc7d4d7b823a","fromSide":"bottom","toNode":"011fd571012dd880","toSide":"top"},
		{"id":"038ebba7968d16b4","fromNode":"925f5caa97d4c969","fromSide":"bottom","toNode":"c676d46295e09b46","toSide":"top"},
		{"id":"821918c8230f7fc1","fromNode":"7d7146f4fe5435dd","fromSide":"right","toNode":"d6b8e5c63e04042f","toSide":"left"},
		{"id":"7c5c66e88a1869eb","fromNode":"7d7146f4fe5435dd","fromSide":"right","toNode":"08cd940819a6e24d","toSide":"left"}
	]
}